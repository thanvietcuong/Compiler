type token =
  | IF of (string)
  | THEN of (string)
  | ELSE of (string)
  | FI of (string)
  | CLASS of (string)
  | LPAREN of (string)
  | RPAREN of (string)
  | PLUS of (string)
  | MINUS of (string)
  | TIMES of (string)
  | DIVIDE of (string)
  | SEMI of (string)
  | COMMA of (string)
  | LBRACE of (string)
  | RBRACE of (string)
  | COLON of (string)
  | LARROW of (string)
  | RARROW of (string)
  | INHERITS of (string)
  | FALSE of (string)
  | TRUE of (string)
  | WHILE of (string)
  | LOOP of (string)
  | POOL of (string)
  | LT of (string)
  | LE of (string)
  | EQ of (string)
  | NOT of (string)
  | TILDE of (string)
  | ISVOID of (string)
  | NEW of (string)
  | DOT of (string)
  | LET of (string)
  | IN of (string)
  | CASE of (string)
  | ESAC of (string)
  | OF of (string)
  | SELF of (string)
  | AT of (string)
  | INTEGER of (string * string)
  | STRING of (string * string)
  | IDENTIFIER of (string * string)
  | TYPE of (string * string)
  | EOF

open Parsing;;
let _ = parse_error;;
# 2 "parser.mly"
open Printf
type identifier = string * string
type typeid = string * string
(*The first string is the line number and the second string is the name of the identifier*)
type cls = 
        | ClassNoInherits of typeid * (feature list)
        | ClassInherits of typeid * typeid * (feature list) 

and feature = 
        | AttributeNoInit of identifier * typeid
        | AttributeInit of identifier * typeid * exp
        | MethodArgs of identifier * (formal list) * typeid * exp

and formal = 
        | Arg of identifier * typeid
        | NoArg

and exp_inner = 
        | Plus of exp * exp
        | Minus of exp * exp
        | Times of exp * exp
        | Divide of exp * exp
        | Identifier of identifier
        | Integer of string
        | String of string
        | True 
        | False
        | If of exp * exp * exp
        | While of exp * exp
        | Assign of identifier * exp
        | Lt of exp * exp
        | Le of exp * exp
        | Eq of exp * exp
        | Not of exp
        | Negate of exp
        | Isvoid of exp
        | New of identifier
        | Block of exp list
        | Dyn_Dispatch of exp * identifier * exp list
        | Self_Dispatch of identifier * exp list
        | Static_Dispatch of exp * typeid * identifier * exp list
        | Let of (binding list) * exp
        | Case of exp * (case_ele list)

and binding =
        | BindingNoInit of identifier * typeid 
        | BindingInit of identifier * typeid * exp
and case_ele = 
        | CaseEle of identifier * typeid * exp

and exp = string * exp_inner

type app = cls list
# 104 "parser.ml"
let yytransl_const = [|
    0 (* EOF *);
    0|]

let yytransl_block = [|
  257 (* IF *);
  258 (* THEN *);
  259 (* ELSE *);
  260 (* FI *);
  261 (* CLASS *);
  262 (* LPAREN *);
  263 (* RPAREN *);
  264 (* PLUS *);
  265 (* MINUS *);
  266 (* TIMES *);
  267 (* DIVIDE *);
  268 (* SEMI *);
  269 (* COMMA *);
  270 (* LBRACE *);
  271 (* RBRACE *);
  272 (* COLON *);
  273 (* LARROW *);
  274 (* RARROW *);
  275 (* INHERITS *);
  276 (* FALSE *);
  277 (* TRUE *);
  278 (* WHILE *);
  279 (* LOOP *);
  280 (* POOL *);
  281 (* LT *);
  282 (* LE *);
  283 (* EQ *);
  284 (* NOT *);
  285 (* TILDE *);
  286 (* ISVOID *);
  287 (* NEW *);
  288 (* DOT *);
  289 (* LET *);
  290 (* IN *);
  291 (* CASE *);
  292 (* ESAC *);
  293 (* OF *);
  294 (* SELF *);
  295 (* AT *);
  296 (* INTEGER *);
  297 (* STRING *);
  298 (* IDENTIFIER *);
  299 (* TYPE *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\003\000\003\000\004\000\004\000\005\000\
\005\000\005\000\007\000\007\000\008\000\008\000\008\000\009\000\
\009\000\010\000\011\000\011\000\012\000\012\000\013\000\013\000\
\013\000\013\000\014\000\015\000\016\000\016\000\006\000\006\000\
\006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
\006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
\006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
\006\000\000\000"

let yylen = "\002\000\
\002\000\000\000\003\000\005\000\007\000\000\000\003\000\003\000\
\005\000\009\000\000\000\002\000\000\000\004\000\003\000\000\000\
\003\000\003\000\000\000\002\000\002\000\001\000\001\000\001\000\
\003\000\003\000\003\000\005\000\006\000\007\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\002\000\
\001\000\001\000\005\000\001\000\001\000\001\000\007\000\005\000\
\004\000\002\000\002\000\002\000\003\000\006\000\006\000\004\000\
\008\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\058\000\000\000\000\000\000\000\001\000\
\000\000\000\000\000\000\003\000\000\000\000\000\000\000\000\000\
\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\007\000\000\000\000\000\000\000\000\000\012\000\
\000\000\005\000\000\000\015\000\000\000\000\000\000\000\000\000\
\042\000\041\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\045\000\046\000\000\000\000\000\014\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\052\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\053\000\000\000\035\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\018\000\
\000\000\000\000\000\000\025\000\026\000\000\000\000\000\000\000\
\000\000\056\000\020\000\000\000\000\000\010\000\000\000\000\000\
\048\000\000\000\000\000\043\000\000\000\000\000\000\000\000\000\
\017\000\000\000\000\000\055\000\054\000\000\000\047\000\000\000\
\000\000\000\000\057\000\000\000\030\000"

let yydgoto = "\002\000\
\004\000\005\000\006\000\014\000\015\000\096\000\024\000\025\000\
\112\000\060\000\097\000\098\000\067\000\068\000\069\000\119\000"

let yysindex = "\020\000\
\018\255\000\000\238\254\000\000\028\000\022\255\008\255\000\000\
\018\255\007\255\009\255\000\000\013\255\041\255\046\255\049\255\
\251\254\023\255\000\000\007\255\007\255\028\255\057\255\069\255\
\251\254\060\255\000\000\066\255\067\255\042\255\068\255\000\000\
\197\001\000\000\047\255\000\000\059\255\197\001\197\001\197\001\
\000\000\000\000\197\001\197\001\197\001\197\001\061\255\050\255\
\197\001\071\255\000\000\000\000\003\255\154\002\000\000\087\255\
\232\001\022\002\030\002\090\255\055\002\154\002\154\002\154\002\
\000\000\094\255\088\255\108\255\110\255\063\002\082\255\166\001\
\197\001\197\001\197\001\197\001\197\001\197\001\197\001\197\001\
\099\255\109\255\197\001\197\001\000\000\197\001\000\000\197\001\
\120\255\197\001\050\255\050\255\122\255\159\255\197\001\154\002\
\165\255\166\001\154\002\248\254\244\001\043\255\035\255\154\002\
\154\002\162\002\160\255\141\255\088\002\241\001\096\002\000\000\
\121\002\166\255\154\002\000\000\000\000\163\255\150\255\166\001\
\154\002\000\000\000\000\166\001\152\255\000\000\197\001\197\001\
\000\000\197\001\157\255\000\000\198\255\199\255\201\255\252\001\
\000\000\154\002\190\255\000\000\000\000\166\001\000\000\197\001\
\207\255\129\002\000\000\122\255\000\000"

let yyrindex = "\000\000\
\215\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\215\000\206\255\000\000\000\000\000\000\000\000\000\000\000\000\
\218\255\000\000\000\000\206\255\206\255\000\000\000\000\000\000\
\218\255\216\255\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\105\255\022\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\101\000\143\000\185\000\
\000\000\000\000\000\000\202\255\208\255\000\000\000\000\234\255\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\232\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\058\255\
\000\000\234\255\227\000\017\000\231\255\189\255\147\255\013\001\
\055\001\059\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\001\255\097\001\000\000\000\000\000\000\000\000\234\255\
\135\001\000\000\000\000\234\255\000\000\000\000\000\000\232\255\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\002\255\000\000\000\000\000\000\234\255\000\000\000\000\
\000\000\000\000\000\000\212\255\000\000"

let yygindex = "\000\000\
\000\000\240\000\000\000\012\000\000\000\223\255\225\000\000\000\
\128\000\000\000\162\255\000\000\203\255\000\000\000\000\109\000"

let yytablesize = 969
let yytable = "\054\000\
\075\000\076\000\077\000\123\000\057\000\058\000\059\000\022\000\
\072\000\061\000\062\000\063\000\064\000\027\000\028\000\070\000\
\078\000\079\000\017\000\073\000\001\000\010\000\003\000\081\000\
\007\000\133\000\011\000\008\000\018\000\134\000\082\000\027\000\
\028\000\009\000\027\000\028\000\023\000\116\000\117\000\099\000\
\100\000\101\000\102\000\103\000\104\000\105\000\106\000\145\000\
\013\000\109\000\110\000\016\000\111\000\077\000\113\000\019\000\
\115\000\020\000\022\000\078\000\079\000\121\000\021\000\022\000\
\022\000\026\000\081\000\078\000\079\000\029\000\022\000\022\000\
\030\000\082\000\081\000\031\000\033\000\022\000\022\000\022\000\
\034\000\082\000\035\000\037\000\036\000\022\000\022\000\022\000\
\022\000\055\000\022\000\066\000\022\000\136\000\111\000\022\000\
\138\000\022\000\022\000\022\000\083\000\056\000\071\000\065\000\
\087\000\044\000\044\000\044\000\044\000\089\000\146\000\044\000\
\044\000\044\000\044\000\044\000\044\000\044\000\044\000\044\000\
\091\000\090\000\092\000\094\000\044\000\044\000\044\000\044\000\
\044\000\044\000\044\000\044\000\044\000\044\000\044\000\044\000\
\044\000\044\000\044\000\044\000\107\000\044\000\044\000\044\000\
\044\000\044\000\044\000\039\000\039\000\039\000\039\000\108\000\
\039\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
\039\000\039\000\114\000\118\000\120\000\124\000\039\000\039\000\
\039\000\039\000\039\000\122\000\125\000\039\000\039\000\039\000\
\039\000\039\000\131\000\039\000\039\000\039\000\130\000\039\000\
\039\000\132\000\039\000\039\000\039\000\038\000\038\000\038\000\
\038\000\135\000\038\000\038\000\038\000\038\000\038\000\139\000\
\038\000\038\000\038\000\038\000\140\000\141\000\142\000\144\000\
\038\000\038\000\038\000\038\000\038\000\147\000\002\000\038\000\
\038\000\038\000\038\000\038\000\006\000\038\000\038\000\038\000\
\011\000\038\000\038\000\008\000\038\000\038\000\038\000\036\000\
\036\000\036\000\036\000\023\000\036\000\036\000\036\000\036\000\
\019\000\024\000\036\000\036\000\036\000\036\000\016\000\029\000\
\012\000\032\000\036\000\036\000\036\000\036\000\036\000\137\000\
\149\000\036\000\036\000\036\000\036\000\036\000\000\000\036\000\
\036\000\036\000\000\000\036\000\036\000\000\000\036\000\036\000\
\036\000\037\000\037\000\037\000\037\000\000\000\037\000\037\000\
\037\000\000\000\000\000\000\000\037\000\037\000\037\000\037\000\
\000\000\000\000\000\000\000\000\037\000\037\000\037\000\037\000\
\037\000\000\000\000\000\037\000\037\000\037\000\037\000\037\000\
\000\000\037\000\037\000\037\000\000\000\037\000\037\000\000\000\
\037\000\037\000\037\000\033\000\033\000\033\000\033\000\000\000\
\033\000\033\000\000\000\000\000\000\000\000\000\033\000\033\000\
\033\000\033\000\000\000\000\000\000\000\000\000\033\000\033\000\
\033\000\033\000\033\000\000\000\000\000\033\000\033\000\033\000\
\033\000\033\000\000\000\033\000\033\000\033\000\000\000\033\000\
\033\000\000\000\033\000\033\000\033\000\050\000\050\000\050\000\
\050\000\000\000\050\000\050\000\000\000\000\000\000\000\000\000\
\050\000\050\000\050\000\050\000\000\000\000\000\000\000\000\000\
\050\000\050\000\050\000\050\000\050\000\000\000\000\000\000\000\
\050\000\050\000\050\000\050\000\000\000\050\000\050\000\050\000\
\000\000\050\000\050\000\000\000\050\000\050\000\050\000\040\000\
\040\000\040\000\040\000\000\000\040\000\040\000\000\000\000\000\
\000\000\000\000\040\000\040\000\040\000\040\000\000\000\000\000\
\000\000\000\000\040\000\040\000\040\000\040\000\040\000\000\000\
\000\000\000\000\040\000\040\000\040\000\040\000\000\000\040\000\
\040\000\040\000\000\000\040\000\040\000\000\000\040\000\040\000\
\040\000\051\000\051\000\051\000\051\000\000\000\051\000\051\000\
\000\000\000\000\000\000\000\000\051\000\051\000\051\000\051\000\
\000\000\000\000\000\000\000\000\051\000\051\000\051\000\051\000\
\051\000\000\000\000\000\000\000\051\000\051\000\051\000\051\000\
\000\000\051\000\051\000\051\000\000\000\051\000\051\000\000\000\
\051\000\051\000\051\000\034\000\034\000\034\000\034\000\000\000\
\034\000\034\000\000\000\000\000\000\000\000\000\034\000\034\000\
\034\000\034\000\000\000\000\000\000\000\000\000\034\000\034\000\
\034\000\034\000\034\000\000\000\000\000\000\000\034\000\034\000\
\034\000\034\000\000\000\034\000\034\000\034\000\000\000\034\000\
\034\000\000\000\034\000\034\000\034\000\031\000\031\000\031\000\
\031\000\000\000\031\000\031\000\000\000\000\000\000\000\000\000\
\031\000\031\000\031\000\031\000\000\000\000\000\000\000\000\000\
\031\000\031\000\031\000\031\000\031\000\000\000\000\000\000\000\
\031\000\031\000\031\000\031\000\000\000\031\000\031\000\031\000\
\000\000\031\000\031\000\000\000\031\000\031\000\031\000\032\000\
\032\000\032\000\032\000\000\000\032\000\032\000\000\000\000\000\
\000\000\000\000\032\000\032\000\032\000\032\000\000\000\000\000\
\000\000\000\000\032\000\032\000\032\000\032\000\032\000\000\000\
\000\000\000\000\032\000\032\000\032\000\032\000\000\000\032\000\
\032\000\032\000\000\000\032\000\032\000\000\000\032\000\032\000\
\032\000\049\000\049\000\049\000\049\000\000\000\049\000\049\000\
\000\000\000\000\000\000\000\000\049\000\049\000\049\000\049\000\
\000\000\000\000\000\000\000\000\049\000\049\000\049\000\049\000\
\049\000\000\000\000\000\000\000\049\000\049\000\049\000\049\000\
\000\000\049\000\049\000\049\000\000\000\049\000\049\000\021\000\
\049\000\049\000\049\000\000\000\021\000\021\000\000\000\000\000\
\000\000\000\000\000\000\021\000\021\000\000\000\000\000\000\000\
\000\000\000\000\021\000\021\000\021\000\000\000\000\000\000\000\
\000\000\000\000\021\000\021\000\021\000\021\000\038\000\021\000\
\000\000\021\000\000\000\039\000\021\000\000\000\021\000\021\000\
\021\000\000\000\095\000\040\000\000\000\000\000\000\000\000\000\
\000\000\041\000\042\000\043\000\000\000\000\000\000\000\000\000\
\000\000\044\000\045\000\046\000\047\000\038\000\048\000\000\000\
\049\000\000\000\039\000\050\000\000\000\051\000\052\000\053\000\
\000\000\000\000\040\000\000\000\000\000\000\000\000\000\000\000\
\041\000\042\000\043\000\000\000\000\000\000\000\000\000\000\000\
\044\000\045\000\046\000\047\000\000\000\048\000\000\000\049\000\
\000\000\084\000\050\000\000\000\051\000\052\000\053\000\074\000\
\075\000\076\000\077\000\127\000\000\000\000\000\000\000\000\000\
\074\000\075\000\076\000\077\000\000\000\076\000\077\000\143\000\
\078\000\079\000\080\000\074\000\075\000\076\000\077\000\081\000\
\000\000\078\000\079\000\080\000\078\000\079\000\082\000\000\000\
\081\000\000\000\000\000\081\000\078\000\079\000\080\000\082\000\
\000\000\000\000\082\000\081\000\085\000\074\000\075\000\076\000\
\077\000\000\000\082\000\000\000\000\000\074\000\075\000\076\000\
\077\000\086\000\000\000\000\000\000\000\000\000\078\000\079\000\
\080\000\000\000\000\000\000\000\000\000\081\000\078\000\079\000\
\080\000\000\000\000\000\000\000\082\000\081\000\074\000\075\000\
\076\000\077\000\000\000\000\000\082\000\000\000\074\000\075\000\
\076\000\077\000\000\000\000\000\000\000\088\000\000\000\078\000\
\079\000\080\000\000\000\000\000\000\000\000\000\081\000\078\000\
\079\000\080\000\000\000\000\000\000\000\082\000\081\000\074\000\
\075\000\076\000\077\000\093\000\000\000\082\000\126\000\074\000\
\075\000\076\000\077\000\128\000\000\000\000\000\000\000\000\000\
\078\000\079\000\080\000\000\000\000\000\000\000\000\000\081\000\
\078\000\079\000\080\000\000\000\000\000\000\000\082\000\081\000\
\074\000\075\000\076\000\077\000\000\000\000\000\082\000\000\000\
\074\000\075\000\076\000\077\000\148\000\000\000\000\000\000\000\
\129\000\078\000\079\000\080\000\000\000\000\000\000\000\000\000\
\081\000\078\000\079\000\080\000\000\000\000\000\000\000\082\000\
\081\000\074\000\075\000\076\000\077\000\000\000\000\000\082\000\
\000\000\074\000\075\000\076\000\077\000\000\000\000\000\000\000\
\000\000\000\000\078\000\079\000\080\000\000\000\000\000\000\000\
\000\000\081\000\078\000\079\000\000\000\000\000\000\000\000\000\
\082\000\081\000\000\000\000\000\000\000\000\000\000\000\000\000\
\082\000"

let yycheck = "\033\000\
\009\001\010\001\011\001\098\000\038\000\039\000\040\000\013\001\
\006\001\043\000\044\000\045\000\046\000\013\001\013\001\049\000\
\025\001\026\001\006\001\017\001\001\000\014\001\005\001\032\001\
\043\001\120\000\019\001\000\000\016\001\124\000\039\001\020\000\
\021\000\012\001\034\001\034\001\042\001\091\000\092\000\073\000\
\074\000\075\000\076\000\077\000\078\000\079\000\080\000\142\000\
\042\001\083\000\084\000\043\001\086\000\011\001\088\000\015\001\
\090\000\012\001\001\001\025\001\026\001\095\000\014\001\006\001\
\007\001\043\001\032\001\025\001\026\001\042\001\013\001\014\001\
\016\001\039\001\032\001\007\001\017\001\020\001\021\001\022\001\
\015\001\039\001\016\001\016\001\043\001\028\001\029\001\030\001\
\031\001\043\001\033\001\042\001\035\001\127\000\128\000\038\001\
\130\000\040\001\041\001\042\001\014\001\043\001\032\001\043\001\
\015\001\001\001\002\001\003\001\004\001\016\001\144\000\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\013\001\034\001\013\001\042\001\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\027\001\028\001\029\001\030\001\031\001\
\032\001\033\001\034\001\035\001\042\001\037\001\038\001\039\001\
\040\001\041\001\042\001\001\001\002\001\003\001\004\001\043\001\
\006\001\007\001\008\001\009\001\010\001\011\001\012\001\013\001\
\014\001\015\001\043\001\042\001\006\001\006\001\020\001\021\001\
\022\001\023\001\024\001\007\001\032\001\027\001\028\001\029\001\
\030\001\031\001\016\001\033\001\034\001\035\001\017\001\037\001\
\038\001\036\001\040\001\041\001\042\001\001\001\002\001\003\001\
\004\001\042\001\006\001\007\001\008\001\009\001\010\001\043\001\
\012\001\013\001\014\001\015\001\007\001\007\001\006\001\018\001\
\020\001\021\001\022\001\023\001\024\001\007\001\000\000\027\001\
\028\001\029\001\030\001\031\001\015\001\033\001\034\001\035\001\
\007\001\037\001\038\001\012\001\040\001\041\001\042\001\001\001\
\002\001\003\001\004\001\034\001\006\001\007\001\008\001\009\001\
\007\001\034\001\012\001\013\001\014\001\015\001\015\001\036\001\
\009\000\025\000\020\001\021\001\022\001\023\001\024\001\128\000\
\148\000\027\001\028\001\029\001\030\001\031\001\255\255\033\001\
\034\001\035\001\255\255\037\001\038\001\255\255\040\001\041\001\
\042\001\001\001\002\001\003\001\004\001\255\255\006\001\007\001\
\008\001\255\255\255\255\255\255\012\001\013\001\014\001\015\001\
\255\255\255\255\255\255\255\255\020\001\021\001\022\001\023\001\
\024\001\255\255\255\255\027\001\028\001\029\001\030\001\031\001\
\255\255\033\001\034\001\035\001\255\255\037\001\038\001\255\255\
\040\001\041\001\042\001\001\001\002\001\003\001\004\001\255\255\
\006\001\007\001\255\255\255\255\255\255\255\255\012\001\013\001\
\014\001\015\001\255\255\255\255\255\255\255\255\020\001\021\001\
\022\001\023\001\024\001\255\255\255\255\027\001\028\001\029\001\
\030\001\031\001\255\255\033\001\034\001\035\001\255\255\037\001\
\038\001\255\255\040\001\041\001\042\001\001\001\002\001\003\001\
\004\001\255\255\006\001\007\001\255\255\255\255\255\255\255\255\
\012\001\013\001\014\001\015\001\255\255\255\255\255\255\255\255\
\020\001\021\001\022\001\023\001\024\001\255\255\255\255\255\255\
\028\001\029\001\030\001\031\001\255\255\033\001\034\001\035\001\
\255\255\037\001\038\001\255\255\040\001\041\001\042\001\001\001\
\002\001\003\001\004\001\255\255\006\001\007\001\255\255\255\255\
\255\255\255\255\012\001\013\001\014\001\015\001\255\255\255\255\
\255\255\255\255\020\001\021\001\022\001\023\001\024\001\255\255\
\255\255\255\255\028\001\029\001\030\001\031\001\255\255\033\001\
\034\001\035\001\255\255\037\001\038\001\255\255\040\001\041\001\
\042\001\001\001\002\001\003\001\004\001\255\255\006\001\007\001\
\255\255\255\255\255\255\255\255\012\001\013\001\014\001\015\001\
\255\255\255\255\255\255\255\255\020\001\021\001\022\001\023\001\
\024\001\255\255\255\255\255\255\028\001\029\001\030\001\031\001\
\255\255\033\001\034\001\035\001\255\255\037\001\038\001\255\255\
\040\001\041\001\042\001\001\001\002\001\003\001\004\001\255\255\
\006\001\007\001\255\255\255\255\255\255\255\255\012\001\013\001\
\014\001\015\001\255\255\255\255\255\255\255\255\020\001\021\001\
\022\001\023\001\024\001\255\255\255\255\255\255\028\001\029\001\
\030\001\031\001\255\255\033\001\034\001\035\001\255\255\037\001\
\038\001\255\255\040\001\041\001\042\001\001\001\002\001\003\001\
\004\001\255\255\006\001\007\001\255\255\255\255\255\255\255\255\
\012\001\013\001\014\001\015\001\255\255\255\255\255\255\255\255\
\020\001\021\001\022\001\023\001\024\001\255\255\255\255\255\255\
\028\001\029\001\030\001\031\001\255\255\033\001\034\001\035\001\
\255\255\037\001\038\001\255\255\040\001\041\001\042\001\001\001\
\002\001\003\001\004\001\255\255\006\001\007\001\255\255\255\255\
\255\255\255\255\012\001\013\001\014\001\015\001\255\255\255\255\
\255\255\255\255\020\001\021\001\022\001\023\001\024\001\255\255\
\255\255\255\255\028\001\029\001\030\001\031\001\255\255\033\001\
\034\001\035\001\255\255\037\001\038\001\255\255\040\001\041\001\
\042\001\001\001\002\001\003\001\004\001\255\255\006\001\007\001\
\255\255\255\255\255\255\255\255\012\001\013\001\014\001\015\001\
\255\255\255\255\255\255\255\255\020\001\021\001\022\001\023\001\
\024\001\255\255\255\255\255\255\028\001\029\001\030\001\031\001\
\255\255\033\001\034\001\035\001\255\255\037\001\038\001\001\001\
\040\001\041\001\042\001\255\255\006\001\007\001\255\255\255\255\
\255\255\255\255\255\255\013\001\014\001\255\255\255\255\255\255\
\255\255\255\255\020\001\021\001\022\001\255\255\255\255\255\255\
\255\255\255\255\028\001\029\001\030\001\031\001\001\001\033\001\
\255\255\035\001\255\255\006\001\038\001\255\255\040\001\041\001\
\042\001\255\255\013\001\014\001\255\255\255\255\255\255\255\255\
\255\255\020\001\021\001\022\001\255\255\255\255\255\255\255\255\
\255\255\028\001\029\001\030\001\031\001\001\001\033\001\255\255\
\035\001\255\255\006\001\038\001\255\255\040\001\041\001\042\001\
\255\255\255\255\014\001\255\255\255\255\255\255\255\255\255\255\
\020\001\021\001\022\001\255\255\255\255\255\255\255\255\255\255\
\028\001\029\001\030\001\031\001\255\255\033\001\255\255\035\001\
\255\255\002\001\038\001\255\255\040\001\041\001\042\001\008\001\
\009\001\010\001\011\001\003\001\255\255\255\255\255\255\255\255\
\008\001\009\001\010\001\011\001\255\255\010\001\011\001\004\001\
\025\001\026\001\027\001\008\001\009\001\010\001\011\001\032\001\
\255\255\025\001\026\001\027\001\025\001\026\001\039\001\255\255\
\032\001\255\255\255\255\032\001\025\001\026\001\027\001\039\001\
\255\255\255\255\039\001\032\001\007\001\008\001\009\001\010\001\
\011\001\255\255\039\001\255\255\255\255\008\001\009\001\010\001\
\011\001\012\001\255\255\255\255\255\255\255\255\025\001\026\001\
\027\001\255\255\255\255\255\255\255\255\032\001\025\001\026\001\
\027\001\255\255\255\255\255\255\039\001\032\001\008\001\009\001\
\010\001\011\001\255\255\255\255\039\001\255\255\008\001\009\001\
\010\001\011\001\255\255\255\255\255\255\023\001\255\255\025\001\
\026\001\027\001\255\255\255\255\255\255\255\255\032\001\025\001\
\026\001\027\001\255\255\255\255\255\255\039\001\032\001\008\001\
\009\001\010\001\011\001\037\001\255\255\039\001\015\001\008\001\
\009\001\010\001\011\001\012\001\255\255\255\255\255\255\255\255\
\025\001\026\001\027\001\255\255\255\255\255\255\255\255\032\001\
\025\001\026\001\027\001\255\255\255\255\255\255\039\001\032\001\
\008\001\009\001\010\001\011\001\255\255\255\255\039\001\255\255\
\008\001\009\001\010\001\011\001\012\001\255\255\255\255\255\255\
\024\001\025\001\026\001\027\001\255\255\255\255\255\255\255\255\
\032\001\025\001\026\001\027\001\255\255\255\255\255\255\039\001\
\032\001\008\001\009\001\010\001\011\001\255\255\255\255\039\001\
\255\255\008\001\009\001\010\001\011\001\255\255\255\255\255\255\
\255\255\255\255\025\001\026\001\027\001\255\255\255\255\255\255\
\255\255\032\001\025\001\026\001\255\255\255\255\255\255\255\255\
\039\001\032\001\255\255\255\255\255\255\255\255\255\255\255\255\
\039\001"

let yynames_const = "\
  EOF\000\
  "

let yynames_block = "\
  IF\000\
  THEN\000\
  ELSE\000\
  FI\000\
  CLASS\000\
  LPAREN\000\
  RPAREN\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIVIDE\000\
  SEMI\000\
  COMMA\000\
  LBRACE\000\
  RBRACE\000\
  COLON\000\
  LARROW\000\
  RARROW\000\
  INHERITS\000\
  FALSE\000\
  TRUE\000\
  WHILE\000\
  LOOP\000\
  POOL\000\
  LT\000\
  LE\000\
  EQ\000\
  NOT\000\
  TILDE\000\
  ISVOID\000\
  NEW\000\
  DOT\000\
  LET\000\
  IN\000\
  CASE\000\
  ESAC\000\
  OF\000\
  SELF\000\
  AT\000\
  INTEGER\000\
  STRING\000\
  IDENTIFIER\000\
  TYPE\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'classes) in
    Obj.repr(
# 71 "parser.mly"
                      ( _1 )
# 552 "parser.ml"
               : app))
; (fun __caml_parser_env ->
    Obj.repr(
# 73 "parser.mly"
                ( [] )
# 558 "parser.ml"
               : 'classes))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cls) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'classes) in
    Obj.repr(
# 74 "parser.mly"
                           ( _1 :: _3 )
# 567 "parser.ml"
               : 'classes))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string * string) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'features) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 76 "parser.mly"
                                           ( ClassNoInherits(_2, _4) )
# 578 "parser.ml"
               : 'cls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 5 : string * string) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : string * string) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'features) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 77 "parser.mly"
                                                          ( ClassInherits(_2, _4, _6) )
# 591 "parser.ml"
               : 'cls))
; (fun __caml_parser_env ->
    Obj.repr(
# 79 "parser.mly"
                        ( [] )
# 597 "parser.ml"
               : 'features))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'feature) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'features) in
    Obj.repr(
# 80 "parser.mly"
                                ( _1 :: _3 )
# 606 "parser.ml"
               : 'features))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string * string) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string * string) in
    Obj.repr(
# 82 "parser.mly"
                                 ( AttributeNoInit(_1, _3) )
# 615 "parser.ml"
               : 'feature))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string * string) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : string * string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 83 "parser.mly"
                                           ( AttributeInit(_1, _3, _5) )
# 626 "parser.ml"
               : 'feature))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 8 : string * string) in
    let _2 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 6 : 'formals) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _6 = (Parsing.peek_val __caml_parser_env 3 : string * string) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : 'exp) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 84 "parser.mly"
                                                                        ( MethodArgs(_1, _3, _6, _8) )
# 641 "parser.ml"
               : 'feature))
; (fun __caml_parser_env ->
    Obj.repr(
# 86 "parser.mly"
                                ( [] )
# 647 "parser.ml"
               : 'formals))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'formal) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'formals) in
    Obj.repr(
# 87 "parser.mly"
                          ( _1 :: _2 )
# 655 "parser.ml"
               : 'formals))
; (fun __caml_parser_env ->
    Obj.repr(
# 89 "parser.mly"
                                ( NoArg )
# 661 "parser.ml"
               : 'formal))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string * string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string * string) in
    Obj.repr(
# 90 "parser.mly"
                                      ( Arg(_2, _4) )
# 671 "parser.ml"
               : 'formal))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string * string) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string * string) in
    Obj.repr(
# 91 "parser.mly"
                                ( Arg(_1, _3) )
# 680 "parser.ml"
               : 'formal))
; (fun __caml_parser_env ->
    Obj.repr(
# 93 "parser.mly"
                ( [] )
# 686 "parser.ml"
               : 'exp_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp_list) in
    Obj.repr(
# 94 "parser.mly"
                            ( _1 :: _3 )
# 695 "parser.ml"
               : 'exp_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp_list) in
    Obj.repr(
# 97 "parser.mly"
                            (_1 :: _3)
# 704 "parser.ml"
               : 'exps_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 100 "parser.mly"
                                 ( [] )
# 710 "parser.ml"
               : 'exp_arg_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'exp_arg) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'exp_arg_list) in
    Obj.repr(
# 101 "parser.mly"
                                ( _1 :: _2 )
# 718 "parser.ml"
               : 'exp_arg_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 104 "parser.mly"
                                ( _2 )
# 726 "parser.ml"
               : 'exp_arg))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 105 "parser.mly"
                                ( _1 )
# 733 "parser.ml"
               : 'exp_arg))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'binding_no_init) in
    Obj.repr(
# 108 "parser.mly"
                                                ( _1  :: [])
# 740 "parser.ml"
               : 'binding_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'binding_init) in
    Obj.repr(
# 109 "parser.mly"
                                               ( _1 :: [])
# 747 "parser.ml"
               : 'binding_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'binding_no_init) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'binding_list) in
    Obj.repr(
# 110 "parser.mly"
                                              ( _1 :: _3 )
# 756 "parser.ml"
               : 'binding_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'binding_init) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'binding_list) in
    Obj.repr(
# 111 "parser.mly"
                                          ( _1 :: _3 )
# 765 "parser.ml"
               : 'binding_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string * string) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string * string) in
    Obj.repr(
# 114 "parser.mly"
                                           ( BindingNoInit(_1, _3) )
# 774 "parser.ml"
               : 'binding_no_init))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string * string) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : string * string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 117 "parser.mly"
                                            ( BindingInit(_1, _3, _5) )
# 785 "parser.ml"
               : 'binding_init))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : string * string) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : string * string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'exp) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 120 "parser.mly"
                                                (CaseEle(_1, _3, _5) :: [])
# 797 "parser.ml"
               : 'case_ele_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : string * string) in
    let _2 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : string * string) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'case_ele_list) in
    Obj.repr(
# 121 "parser.mly"
                                                              (CaseEle(_1, _3, _5) :: _7)
# 810 "parser.ml"
               : 'case_ele_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 123 "parser.mly"
                                (
                                        let line, _ = _1 in
                                                (line, Lt(_1, _3))
                                )
# 822 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 127 "parser.mly"
                                (
                                        let line, _ = _1 in
                                                (line, Le(_1, _3))
                                )
# 834 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 131 "parser.mly"
                                (
                                        let line, _ = _1 in
                                                (line, Eq(_1, _3))
                                )
# 846 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string * string) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 136 "parser.mly"
                                ( let line, _ = _1 in 
                                        (line, Assign(_1, _3)))
# 856 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'exps_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 139 "parser.mly"
                                (
                                        let line = _1 in
                                                (line, Block(_2)) 
                                )
# 868 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 143 "parser.mly"
                                 ( let line, _ = _1 in
                                        ( line, Minus(_1, _3)) )
# 878 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 145 "parser.mly"
                                ( let line, _ = _1 in
                                        ( line, Plus(_1, _3)) )
# 888 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 147 "parser.mly"
                                ( let line, _ = _1 in
                                        ( line, Times(_1, _3)) )
# 898 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 149 "parser.mly"
                                (
                                        let line, _ = _1 in 
                                                (line, Divide(_1, _3))
                                )
# 910 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 153 "parser.mly"
                                (
                                        let line = _1 in
                                                (line, Negate(_2))
                                )
# 921 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 157 "parser.mly"
                               (
                                        let line = _1 in
                                                (line, True)
                                )
# 931 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 161 "parser.mly"
                                (
                                        let line = _1 in
                                                (line, False)
                                )
# 941 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'case_ele_list) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 166 "parser.mly"
                                (
                                        let line = _1 in 
                                                (line, Case(_2, _4))
                                )
# 955 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string * string) in
    Obj.repr(
# 170 "parser.mly"
                                ( let line, text = _1 in
                                        (line, Identifier(_1)))
# 963 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string * string) in
    Obj.repr(
# 172 "parser.mly"
                                ( let line, int_text = _1 in
                                        (line, Integer(int_text)) )
# 971 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string * string) in
    Obj.repr(
# 174 "parser.mly"
                                ( let line, text = _1 in
                                        (line, String(text)) )
# 979 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 5 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'exp) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'exp) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 177 "parser.mly"
                                ( let line = _1 in
                                        (line, If(_2, _4, _6)) )
# 993 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'exp) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 180 "parser.mly"
                                (
                                        let line = _1 in
                                                (line, While(_2, _4))
                                )
# 1007 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'binding_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 184 "parser.mly"
                                    (   let line = _1 in
                                                (line, Let(_2, _4)))
# 1018 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 186 "parser.mly"
                                (
                                        let line = _1 in 
                                                (line, Not(_2))
                                )
# 1029 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 190 "parser.mly"
                                (
                                        let line = _1 in
                                                (line, Isvoid(_2))
                                )
# 1040 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string * string) in
    Obj.repr(
# 194 "parser.mly"
                              (
                                        let line = _1 in
                                                (line, New(_2))
                                )
# 1051 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 198 "parser.mly"
                            (_2)
# 1060 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : 'exp) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : string * string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'exp_arg_list) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 199 "parser.mly"
                                                        ( let line, _ = _1 in
                                                                (line, Dyn_Dispatch(_1, _3, _5)))
# 1073 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : string * string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'exp_arg_list) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 201 "parser.mly"
                                                         ( let line = _1 in
                                                                (line, Self_Dispatch(_3, _5)))
# 1086 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string * string) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'exp_arg_list) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 203 "parser.mly"
                                                ( let line, _ = _1 in
                                                                (line, Self_Dispatch(_1, _3)))
# 1097 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 7 : 'exp) in
    let _2 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 5 : string * string) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : string * string) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : 'exp_arg_list) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 205 "parser.mly"
                                                                ( let line, _ = _1 in
                                                                (line, Static_Dispatch(_1, _3, _5, _7)))
# 1112 "parser.ml"
               : 'exp))
(* Entry app_rule *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let app_rule (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : app)
;;
# 209 "parser.mly"
let read_tokens token_filename = 
        let fin = open_in token_filename in (*reading lexeme tokens from file*)
        let tokens_queue = Queue.create () in (*storage for parsed tokens*)
        let get_line () = String.trim (input_line fin) in 
        let get_untrimmed_line () = input_line fin in 
        (try while true do
                let l = get_line () in (*read file line by line and saving tokens into the queue*)
                let token_type = get_line () in
                let token = match token_type with
                | "class" -> CLASS(l)
                | "semi" -> SEMI(l)
                | "comma" -> COMMA(l)
                | "dot" -> DOT(l)
                | "colon" -> COLON(l)
                | "lbrace" -> LBRACE(l)
                | "rbrace" -> RBRACE(l)
                | "lparen" -> LPAREN(l)
                | "rparen" -> RPAREN(l)
                | "plus" -> PLUS(l)
                | "minus" -> MINUS(l)
                | "times" -> TIMES(l)
                | "divide" -> DIVIDE(l)
                | "larrow" -> LARROW(l)
                | "inherits" -> INHERITS(l)
                | "if" -> IF(l)
                | "then" -> THEN(l)
                | "else" -> ELSE(l)
                | "fi" -> FI(l)
                | "while" -> WHILE(l)
                | "loop" -> LOOP(l)
                | "pool" -> POOL(l)
                | "type" -> TYPE(l, get_line ())
                | "equals" -> EQ(l)
                | "lt" -> LT(l)
                | "le" -> LE(l)
                | "not" -> NOT(l)
                | "tilde" -> TILDE(l)
                | "integer" -> INTEGER(l, get_line ())
                | "string" -> STRING(l, get_untrimmed_line ())
                | "identifier" -> IDENTIFIER(l, get_line ())
                | "isvoid" -> ISVOID(l)
                | "new" -> NEW(l)
                | "true" -> TRUE(l)
                | "false" -> FALSE(l)
                | "let"   -> LET(l)
                | "in"  -> IN(l)
                | "case" -> CASE(l)
                | "esac" -> ESAC(l)
                | "of" -> OF(l)
                | "rarrow" -> RARROW(l)
                | "self" -> SELF(l)
                | "at" -> AT(l)
                | _ -> begin
                        printf "unexpected token type: %s \n" token_type ;
                        exit 1
                end in
                Queue.add (l, token, token_type) tokens_queue
        done with 
        | _ -> ()) ;
        close_in fin ;
        tokens_queue

let main () = begin
        let token_filename = Sys.argv.(1) in
        let tokens_queue = read_tokens token_filename in
        let lexbuf = Lexing.from_string "" in
        let ex_line_number = ref "1" in
        let err_token = ref "" in
        let lexer_token lb = 
                if Queue.is_empty tokens_queue then
                        EOF
                else begin
                        let line_number, next_token, token_type = Queue.take tokens_queue in
                        ex_line_number := line_number ;
                        err_token := token_type;
                        next_token
                end in
        let res =  (*try to parse tokens against grammar*) 
                try
                        app_rule lexer_token lexbuf
                with
                | _ -> begin
                        printf "ERROR: %s: Parser: syntax error near token of type %s \n" !ex_line_number (String.uppercase_ascii !err_token) ;
                        exit 0
                end
        in
        
        (*save the output into a file for the next compilation phase - symantic analysis*)
        let output_f = (Filename.chop_extension Sys.argv.(1)) ^ ".cl-ast" in
        let f = open_out output_f in
        
        (* recursivly pass parsed tokens to the set of functions to print out matching results into the output file *)
        let rec output_app res = out_classes res

        and out_classes res = 
                fprintf f "%d\n" (List.length res) ;
                List.iter output_cls res
        
        and output_cls res = 
                match res with
                | ClassNoInherits(cls_name, cls_features) ->
                                output_identifier cls_name;
                                fprintf f "no_inherits\n";
                                fprintf f "%d\n" (List.length cls_features);
                                List.iter output_feature cls_features
                | ClassInherits(cls_name, inh_name, cls_features) ->
                                output_identifier cls_name;
                                let l, typ = inh_name in
                                fprintf f "inherits\n%s\n%s\n" l typ;
                                fprintf f "%d\n" (List.length cls_features);
                                List.iter output_feature cls_features

        and output_identifier (line_number, string_lexeme) =
                fprintf f "%s\n%s\n" line_number string_lexeme

        and output_type (line_number, string_type) =
                fprintf f "%s\n%s\n" line_number string_type

        and output_feature res = 
                match res with
                | AttributeNoInit(attr_name, type_name) ->
                                fprintf f "attribute_no_init\n" ;
                                output_identifier attr_name;
                                output_identifier type_name
                | AttributeInit(attr_name, type_name, init_exp) ->
                                fprintf f "attribute_init\n" ;
                                output_identifier attr_name;
                                output_identifier type_name;
                                output_exp init_exp
                | MethodArgs(method_name, args, type_name, exp) ->
                                fprintf f "method\n" ;
                                output_identifier method_name;
                                fprintf f "%d\n" (List.length args);
                                List.iter output_arg args;
                                output_identifier type_name;
                                output_exp exp

        and output_arg arg =
                match arg with
                | Arg(name, typ) -> 
                        let l_n, arg_name = name in
                        let l_t, arg_typ = typ in
                        fprintf f "%s\n%s\n%s\n%s\n" l_n arg_name l_t arg_typ;
                | NoArg ->  
                                fprintf f "0\n";

        and output_binding res =
                match res with 
                | BindingNoInit(id, typ) ->
                        fprintf f "let_binding_no_init\n";
                        output_identifier id;
                        output_type typ
                | BindingInit(id, typ, exp) ->
                        fprintf f "let_binding_init\n";
                        output_identifier id;
                        output_type typ;
                        output_exp exp
        and output_ele res =
                match res with
                | CaseEle(id, typ, expr) ->
                        output_identifier id;
                        output_type typ;
                        output_exp expr

        and output_exp (line, inner_exp) =
                fprintf f "%s\n" line ;
                match inner_exp with
                | Integer(int_str) -> fprintf f "integer\n%s\n" int_str
                | String(str) -> fprintf f "string\n%s\n" str
                | True -> fprintf f "true\n" 
                | False -> fprintf f "false\n" 
                | Identifier(id) ->
                                fprintf f "identifier\n";
                                output_identifier id
                | Plus(expr1, expr2) -> 
                                fprintf f "plus\n" ;
                                output_exp expr1 ;
                                output_exp expr2
                | Times(expr1, expr2) -> 
                                fprintf f "times\n" ;
                                output_exp expr1;
                                output_exp expr2
                | Minus(expr1, expr2) -> 
                                fprintf f "minus\n" ;
                                output_exp expr1;
                                output_exp expr2
                | Divide(expr1, expr2) -> 
                                fprintf f "divide\n" ;
                                output_exp expr1;
                                output_exp expr2
                | If(precondition, then_expr, else_expr) ->
                                fprintf f "if\n" ;
                                output_exp precondition;
                                output_exp then_expr;
                                output_exp else_expr
                | While(precondition, body_expr) -> 
                                fprintf f "while\n" ;
                                output_exp precondition;
                                output_exp body_expr
                | Assign(expr1, expr2) ->
                                fprintf f "assign\n" ;
                                output_identifier expr1;
                                output_exp expr2
                | Lt(expr1, expr2) -> 
                                fprintf f "lt\n" ;
                                output_exp expr1;
                                output_exp expr2
                | Le(expr1, expr2) -> 
                                fprintf f "le\n" ;
                                output_exp expr1;
                                output_exp expr2
                | Eq(expr1, expr2) -> 
                                fprintf f "eq\n" ;
                                output_exp expr1;
                                output_exp expr2
                | Not(expr)  ->    
                                fprintf f "not\n" ;
                                output_exp expr
                | Negate(expr)  ->    
                                fprintf f "negate\n" ;
                                output_exp expr
                | Isvoid(expr) ->
                                fprintf f "isvoid\n" ;
                                output_exp expr
                | New(expr) ->
                                fprintf f "new\n" ;
                                output_identifier expr
                | Block(expr) ->
                                fprintf f "block\n" ;
                                fprintf f "%d\n" (List.length expr);
                                List.iter output_exp expr
                | Dyn_Dispatch(expr, id, args) -> 
                                fprintf f "dynamic_dispatch\n";
                                output_exp expr;
                                output_identifier id;
                                fprintf f "%d\n" (List.length args);
                                List.iter output_exp args
                | Self_Dispatch(id, args) -> 
                                fprintf f "self_dispatch\n";
                                output_identifier id;
                                fprintf f "%d\n" (List.length args);
                                List.iter output_exp args
                | Static_Dispatch(expr, typ, id, args) -> 
                                fprintf f "static_dispatch\n";
                                output_exp expr;
                                output_type typ;
                                output_identifier id;
                                fprintf f "%d\n" (List.length args);
                                List.iter output_exp args
                | Let(bindings, expr)     ->
                                fprintf f "let\n";
                                fprintf f "%d\n" (List.length bindings);
                                List.iter output_binding bindings;
                                output_exp expr;
                | Case(expr, elelist)   ->
                                fprintf f "case\n";
                                output_exp expr;
                                fprintf f "%d\n" (List.length elelist);
                                List.iter output_ele elelist
        in
        output_app res ;
        close_out f
end ;;
main() ;;
# 1402 "parser.ml"
